==Overview
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20181011-01.gif}}\\
I like to think of this project as a Charlie Brown Christmas tree with
[[https://www.adafruit.com/products/1938 | NeoPixels]]. There isn't any evergreen with this tree.  It is just ribbon 
cable branches with RGB NeoPixel LEDs.



==How to Clone
This project uses submodules (ie. GCC4MBED).  Cloning therefore requires an extra flag to get all of the necessary code.

{{{
git clone --recursive git@github.com:adamgreen/NeoPixelTree.git
}}}



==Final Version
It might have taken me a few years but I did finally finish this project on October 11th 2018. The final version increased
the number of LEDs from 5 to 50, added a wooden base to hide the electronics, added an inline fuse holder on the main 5V
supply line, and added 3 rotary encoders to change the animation, speed, and brightness. I created custom PCBs to distribute
the power and data signals from the tree trunk to each LED on a particular level of the tree. The LEDs were also mounted on
custom PCBs. 4-wire ribbon cable (solid conductor) was used to run between these PCBs to form the branches. The PCB designs
can be found in the 
[[https://github.com/adamgreen/NeoPixelTree/tree/master/hardware | hardware/ folder]].

If I was to do something like this again, I would just use a small artificial tree and something like 
[[https://www.amazon.com/WESIRI-Diffused-Individually-Addressable-Waterproof/dp/B075T84ZR3 | these premade LED sets]].
I would then add my custom electronics and firmware to control the premade LED set. The current version isn't as robust as I
would like. The ribbon cable isn't stiff enough to hold up the LEDs on the longest branches and the tree trunk needed to be
reinforced with wooden dowels.



==5 NeoPixel Prototype
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160401-02.GIF}}\\
As of April 1st, 2016, I am just at the prototyping stage with five
[[https://www.adafruit.com/products/1938 | 5mm NeoPixel LEDs]]. This gives me an opportunity to implement and test
driver code for the WS2812 on the [[https://developer.mbed.org/platforms/mbed-LPC1768/ | mbed LPC1768]]. It also allows
me to start playing with the patterns and animations that I think would be interesting to see on a 1' tree with 40+
LEDs. The current firmware for this prototype can be found
[[https://github.com/adamgreen/NeoPixelTree/tree/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f | here]].

{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/hardware/Prototype.png}}\\
[[https://github.com/adamgreen/NeoPixelTree/blob/master/hardware/Prototype.pdf | PDF of schematic]]\\
[[https://github.com/adamgreen/NeoPixelTree/blob/master/hardware/Prototype.sch | Eagle CAD schematic]]

As can be seen in the above schematic, there aren't a lot of electronics involved with this project:
* The [[https://www.adafruit.com/products/834 | 96MHz Cortex-M3 based mbed LPC1768 development board with 64k of RAM and 512k of FLASH]].
* A [[http://www.digikey.com/product-detail/en/fairchild-semiconductor/BSS138/BSS138CT-ND/244294 | BSS138 N-Channel MOSFET]]
  used for converting the 3.3V serial output from the LPC1768 to the 5V expected by the **WS2812** addressable LED
  controllers in the NeoPixels.
* Five [[https://www.adafruit.com/products/1938 | Adafruit NeoPixel Diffused 5mm Through-Hole LEDs]].
* And a few passives.

**Note**: //I am currently powering the 5 NeoPixels in this prototype from the 5V USB supply. If I was using any more
LEDs, I would use a dedicated power supply to increase the amount of available current (~60mA max per NeoPixel). The
mbed LPC1768 does contain a current limiting IC to make sure that we don't overburden the USB bus supply.



==WS2812 Driver
===WS2812 Protocol over SPI
The code for my **WS2812** driver can be found in
[[https://github.com/adamgreen/NeoPixelTree/blob/master/firmware/NeoPixel.cpp]].  It uses the SSP peripheral on the
LPC1768 in SPI mode to drive the WS2812 asynchronous serial protocol.  The SPI protocol is run at 10MHz which makes each
SPI bit **0.1us** (0.1 microseconds) in length.  The following example shows how the SPI protocol typically sends a
0xA5 byte over the MOSI (Master Out Slave In) signal in 8 clock cycles.\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-02.png}}\\

If we look at the [[https://cdn-shop.adafruit.com/datasheets/WS2812.pdf | WS2812 Datasheet]] we will see that the
standard SPI protocol shown above doesn't work with the WS2812 driver in the NeoPixels.\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-01.png}}\\
//The above timing diagram taken from page 4 of the
[[https://cdn-shop.adafruit.com/datasheets/WS2812.pdf | WS2812 Datasheet]].//

It is however possible to send certain bit patterns out via SPI to generate the waveforms required by the WS2812
protocol.  Each bit sent to the NeoPixel will be composed of 12 SPI clock cycles (1.2us) which is within the
1.25us +/- 600ns from the WS2812 data sheet.
* A 0 bit on MOSI will be: {{{1111 0000 0000}}}\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-03.png}}
** T0H is 4 cycles = 0.4us which is within the 0.35us +/- 150ns from the data sheet.
** T0L is 8 cycles = 0.8us which exactly matches the 0.8us from the data sheet.
* A 1 bit on MOSI will be: {{{1111 1110 0000}}}\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-04.png}}
** T1H is 7 cycles = 0.7us which exactly matches the 0.7us from the data sheet.
** T1L is 5 cycles = 0.5us which is within the 0.6us +/- 150ns from the data sheet.

The following example shows how a byte with the value of 0xA5 would be sent to the WS2812 over SPI's MOSI signal using
the above encoding:
{{{
   Hex:                              A                                                           5
Binary:       1              0              1              0              0              1              0              1
  MOSI: 1111 1110 0000 1111 0000 0000 1111 1110 0000 1111 0000 0000 1111 0000 0000 1111 1110 0000 1111 0000 0000 1111 1110 0000
}}}

===Buffers, Buffers, and more Buffers
The pixel data makes its home in a few different locations during its lifetime. Sometimes the CPU is used to transfer
the data from one locations to another and at other times the GPDMA engine is utilized to perform the transfer without
CPU intervention. What follows is an overview of the 3 different buffers in which the pixel data can reside:
# The main() code will run animations which manipulates the
  [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/Pixel.h#L16 | 24-bit RGB data]]
  for each pixel. It maintains this pixel data in
  [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/main.cpp#L120 | arrays which contain one RGBData structure per NeoPixel]].
** The CPU is used to manipulate these arrays of RGBData to create the desired lighting animations.
# There is a
  [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.h#L62 | single back buffer]].
** The back buffer maintains the data in the format where 12-bits of SPI data equal 1-bit of WS2812 data as described in
   the previous section.
** The back buffer is updated with the latest pixel data when
   [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.cpp#L169 | NeoPixel::set()]]
   is called.
** The CPU is used to perform this conversion, most of which takes place in
   [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.cpp#L212 | NeoPixel::emitByte() ]].
# There are
  [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.h#L61 | two front buffers]].
** These two front buffers are the same size and format as the back buffer.
** These two front buffers are continuously transmitted to the WS2812 based NeoPixels via the DMA controlled SSP
   peripheral.
** The DMA controller automatically ping/pongs between the transmitting of each of these two front buffers with no CPU
   intervention.
*** This is accomplished with a circular scatter/gather list being used with the GPDMA peripheral.
*** This circular list was setup in
    [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.cpp#L117 | NeoPixel::start()]]
    when starting the DMA based transmission of SPI data.
** Each time the transmission of a front buffer completes,
   [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/NeoPixel.cpp#L271 | NeoPixel::spiTransmitInterruptHandler()]]
   is executed.
*** NeoPixel::spiTransmitInterruptHandler() tracks which of the two frames buffers is now starting to be sent and which
    one just completed.
*** If there is new content in the back buffer, NeoPixel::spiTransmitInterruptHandler() will copy it into the front
    buffer not currently being transmitted.
*** It uses the
    [[https://github.com/adamgreen/NeoPixelTree/blob/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f/firmware/GPDMA.c#L169 | dmaMemCopy()]]
    routine to perform this copy in the background to further reduce CPU load.

===Pros
* Highly leverages the GPDMA peripheral on the LPC1768.
** Circular scatter/gater list for DMA based SPI transmissions.
** DMA based memory copy.
* CPU is just used where it really needs to be used.
** Running animations.
** Converting RGB data to SPI bit stream.
* Never stops sending SPI data so that it never goes idle which would result in MOSI being tristated.
** With the pullup resistors on the level translator this would result in MOSI being high when it should actually be
   low.
* Functions similar to a graphics card.
** But graphics cards are updating displays with no memory and must maintain a set video rate.
** NeoPixels have their own memory and don't need to be refreshed until something actually changes.

===Cons
* Is always clocking out data even when the pixel state hasn't changed.
** Increased power usage.
* Is a bit complicated and hard to track the movement of the data in its various forms and locations.
