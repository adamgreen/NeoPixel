==Overview
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160401-02.GIF}}\\
I like to think of this project as a Charlie Brown's Christmas tree with
[[https://www.adafruit.com/products/1938 | NeoPixels]]. There won't be any evergreen with this tree.  It will just be
copper wire branches with RGB NeoPixel LEDs on the ends.



==How to Clone
This project uses submodules (ie. GCC4MBED).  Cloning therefore requires an extra flag to get all of the necessary code.

{{{
git clone --recursive git@github.com:adamgreen/NeoPixelTree.git
}}}



==5 NeoPixel Prototype
As of April 1st, 2016, I am just at the prototyping stage with five
[[https://www.adafruit.com/products/1938 | 5mm NeoPixel LEDs]]. This gives me an opportunity to implement and test
driver code for the WS2812 on the [[https://developer.mbed.org/platforms/mbed-LPC1768/ | mbed LPC1768]]. It also allows
me to start playing with the patterns and animations that I think would be interesting to see on a 1' tree with 40+
LEDs. The current firmware for this prototype can be found
[[https://github.com/adamgreen/NeoPixelTree/tree/39f0cb97e8f2b1c6831bfb1fb2556a8c09b8e69f | here]].

{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/hardware/Prototype.png}}\\
[[https://github.com/adamgreen/NeoPixelTree/blob/master/hardware/Prototype.pdf | PDF of schematic]]\\
[[https://github.com/adamgreen/NeoPixelTree/blob/master/hardware/Prototype.sch | Eagle CAD schematic]]

As can be seen in the above schematic, there aren't a lot of electronics involved with this project:
* The [[https://www.adafruit.com/products/834 | 96MHz Cortex-M3 based mbed LPC1768 development board with 64k of RAM and 512k of FLASH]].
* A [[http://www.digikey.com/product-detail/en/fairchild-semiconductor/BSS138/BSS138CT-ND/244294 | BSS138 N-Channel MOSFET]]
  used for converting the 3.3V serial output from the LPC1768 to the 5V expected by the **WS2812** addressable LED
  controllers in the NeoPixels.
* Five [[https://www.adafruit.com/products/1938 | Adafruit NeoPixel Diffused 5mm Through-Hole LEDs]].
* And a few passives.

**Note**: //I am currently powering the 5 NeoPixels in this prototype from the 5V USB supply. If I was using any more
LEDs, I would use a dedicated power supply to increase the amount of available current (~60mA max per NeoPixel). The
mbed LPC1768 does contain a current limiting IC to make sure that we don't overburden the USB bus supply.

{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160401-01.JPG}}



==WS2812 Driver
The code for my **WS2812** driver can be found in
[[https://github.com/adamgreen/NeoPixelTree/blob/master/firmware/NeoPixel.cpp]].  It uses the SSP peripheral on the
LPC1768 in SPI mode to drive the WS2812 asynchronous serial protocol.  The SPI protocol is run at 10MHz which makes each
SPI bit **0.1us** (0.1 microseconds) in length.  The following examples shows how the SPI protocol typically sends a
0xA5 byte over the MOSI (Master Out Slave In) signal in 8 clock cycles.\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-02.png}}\\

If we look at the [[https://cdn-shop.adafruit.com/datasheets/WS2812.pdf | WS2812 Datasheet]] we will see that the
standard SPI protocol shown above doesn't work with the WS2812 driver in the NeoPixels.\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-01.png}}\\
//The above timing diagram taken from page 4 of the
[[https://cdn-shop.adafruit.com/datasheets/WS2812.pdf | WS2812 Datasheet]].//

It is however possible to send certain bit patterns out via SPI to generate the waveforms required by the WS2812
protocol.  Each bit sent to the NeoPixel will be composed of 12 SPI clock cycles (1.2us) which is within the
1.25us +/- 600ns from the WS2812 data sheet.
* A 0 bit on MOSI will be: {{{1111 0000 0000}}}\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-03.png}}
** T0H is 4 cycles = 0.4us which is within the 0.35us +/- 150ns from the data sheet.
** T0L is 8 cycles = 0.8us which exactly matches the 0.8us from the data sheet.
* A 1 bit on MOSI will be: {{{1111 1110 0000}}}\\
{{https://raw.githubusercontent.com/adamgreen/NeoPixelTree/master/images/20160407-04.png}}
** T1H is 7 cycles = 0.7us which exactly matches the 0.7us from the data sheet.
** T1L is 5 cycles = 0.5us which is within the 0.6us +/- 150ns from the data sheet.

The following example shows how a byte with the value of 0xA5 would be sent to the WS2812 over SPI's MOSI signal using
the above encoding:
{{{
   Hex:                              A                                                           5
Binary:       1              0              1              0              0              1              0              1
  MOSI: 1111 1110 0000 1111 0000 0000 1111 1110 0000 1111 0000 0000 1111 0000 0000 1111 1110 0000 1111 0000 0000 1111 1110 0000
}}}
